<?php

/**
 * @brief A Kore_Command object performs a single linear processing stream given a http
 * 
 */
abstract class CAC_Command {

    private static $STATUS_STRINGS = array (
        'CMD_DEFAULT'			=>0,
        'CMD_OK' 				=> 1,
        'CMD_ERROR' 			=> 2,
        'CMD_INSUFFICIENT_DATA' => 3
    );
	
    private $status = 0;
	protected $response;
    
	
    final function __construct() {
        $this->response = new CAC_Response();
    }
	
	
	/**
	 * @brief Overriden in sub-classes. Called by public call to Kore_Command::execute()
	 * @return
	 */
    abstract function doExecute( CAC_Client_Request $http );
    
	
	/**
	 * @brief Public method to excute the command sequence
	 * 
	 * @return INT Status of the command
	 * @see Kore_Command::getStatusString() to return the status as a string
	 */
    public function execute( CAC_Client_Request $http ) {
        $this->status = $this->doExecute( $http );
       	return $this->status;
    }
	public function getResponse(){
        return $this->response;
    }
	/**
	 * @return INT status
	 */
    public function getStatus() {
        return $this->status;
    }
    /**
	 * @return String status
	 */
    public function getStatusString(){
    	return array_search( $this->status, self::$STATUS_STRINGS );
    }
    
	
	/**
	 * @brief Used by sub-classes to access status values via Strings
	 * 
	 * @return INT status string
	 * @return INT default status string if the provided status is not valid
	 */
    static function statuses( $str='CMD_DEFAULT' ) {
        if ( empty( $str ) ) { $str = 'CMD_DEFAULT'; }
        return self::$STATUS_STRINGS[$str];
    }
	
}


?>